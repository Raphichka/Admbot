import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ChatPermissions
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta
from collections import defaultdict
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
TOKEN = "8301190456:AAHekIPMG8mNW2GIlWlU4u1OAUue3SAvV4E"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
LOG_CHAT_ID = None  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (-10012345678)
ADMINS = [1247582425]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤ [123456789, 987654321]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
user_warns = defaultdict(int)
user_mutes = defaultdict(int)
user_msg_count = defaultdict(int)
banned_users = set()

# –§–∏–ª—å—Ç—Ä—ã
BANNED_WORDS = ["–º–∞—Ç1", "–º–∞—Ç2", "—Å–ø–∞–º", "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ"]
SPAM_LIMIT = 8  # –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É

# --- –°–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞ ---
async def reset_message_counters():
    """–û—á–∏—â–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
    while True:
        await asyncio.sleep(60)
        user_msg_count.clear()
        logging.info("–°—á—ë—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã")

def count_user_messages(user_id: int) -> int:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    user_msg_count[user_id] += 1
    return user_msg_count[user_id]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def log_action(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç"""
    if LOG_CHAT_ID:
        await bot.send_message(LOG_CHAT_ID, text)

async def add_warn(user: types.User, chat_id: int, reason: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏—è"""
    user_warns[user.id] += 1
    warns = user_warns[user.id]

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_msg = f"‚ö†Ô∏è {user.mention_html()} | {reason}\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warns}/3"
    await log_action(log_msg)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    await bot.send_message(
        chat_id=chat_id,
        text=f"{user.mention_html()}, –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {reason} ({warns}/3)"
    )

    # –ú—É—Ç –Ω–∞ 3 —á–∞—Å–∞ –ø—Ä–∏ 3 –≤–∞—Ä–Ω–∞—Ö
    if warns >= 3:
        until_date = datetime.now() + timedelta(hours=3)
        await bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        user_warns[user.id] = 0
        user_mutes[user.id] += 1
        await log_action(f"üö´ {user.mention_html()} | –ú—É—Ç 3 —á. –ù–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")

        # –ë–∞–Ω –ø—Ä–∏ 3 –º—É—Ç–∞—Ö
        if user_mutes[user.id] >= 3:
            await bot.ban_chat_member(chat_id, user.id)
            banned_users.add(user.id)
            await log_action(f"‚õî {user.mention_html()} | –ë–ê–ù. 3+ –º—É—Ç–æ–≤")

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---
@dp.message(Command("unmute"))
async def unmute_user(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")

    if not message.reply_to_message:
        return await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    user = message.reply_to_message.from_user
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user.id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        await message.reply(f"‚úÖ {user.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω")
        await log_action(f"üîà –ê–¥–º–∏–Ω {message.from_user.mention_html()} —Ä–∞–∑–º—É—Ç–∏–ª {user.mention_html()}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("unban"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")

    if not message.reply_to_message:
        return await message.reply("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    user = message.reply_to_message.from_user
    try:
        await bot.unban_chat_member(
            chat_id=message.chat.id,
            user_id=user.id
        )
        banned_users.discard(user.id)
        await message.reply(f"‚úÖ {user.mention_html()} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        await log_action(f"üîì –ê–¥–º–∏–Ω {message.from_user.mention_html()} —Ä–∞–∑–±–∞–Ω–∏–ª {user.mention_html()}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è ---
@dp.message()
async def auto_moderate(message: Message):
    if not message.from_user or message.from_user.id in ADMINS:
        return

    user = message.from_user
    chat_id = message.chat.id

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if message.text and any(word in message.text.lower() for word in BANNED_WORDS):
        await message.delete()
        await add_warn(user, chat_id, "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ")

    # 2. –ê–Ω—Ç–∏-—Å–ø–∞–º (—Ñ–ª—É–¥)
    elif count_user_messages(user.id) > SPAM_LIMIT:
        await add_warn(user, chat_id, "–§–ª—É–¥")

    # 3. –ö–∞–ø—Å (>60% —Å–∏–º–≤–æ–ª–æ–≤)
    elif (message.text
          and len(message.text) >= 10
          and sum(1 for c in message.text if c.isupper()) / len(message.text) > 0.6):
        await add_warn(user, chat_id, "–ö–∞–ø—Å")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤
    asyncio.create_task(reset_message_counters())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())